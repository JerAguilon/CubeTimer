package cubetimer;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JTable;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JLabel;
import java.awt.Component;
import javax.swing.Box;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import javax.swing.SwingConstants;
import java.awt.Color;

public class ScrambleShower extends JFrame {
	JPanel panel1 = new JPanel();
	JPanel panel0 = new JPanel();
	JPanel panel2 = new JPanel();
	JPanel panel3 = new JPanel();
	JPanel panel4 = new JPanel();
	JPanel panel5 = new JPanel();
	
	
	JLabel stickers[][] = new JLabel[6][9];
	private JPanel contentPane;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					ScrambleShower frame = new ScrambleShower();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public ScrambleShower() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 666, 494);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		panel1.setBounds(62, 152, 120, 120);
		contentPane.add(panel1);
		panel1.setLayout(null);
		
		populateStickers();
		
	} public JLabel[][] cubieArranger(String scramble){
		populateStickers();
		
		CubeTwister ct = new CubeTwister(scramble);
		int[][] colorCode = ct.getCube()
		
		for(int i = 0; i<6;i++){
			for(int j = 0; i<=8;i++){
				switch (colorCode[i][j]){
					case 0: stickers[i][j].setBackground(Color.WHITE);
					
					case 1: stickers[i][j].setBackground(Color.ORANGE);
					
					case 2: stickers[i][j].setBackground(Color.GREEN);
					
					case 3: stickers[i][j].setBackground(Color.RED);
					
					case 4: stickers[i][j].setBackground(Color.BLUE);
					
					case 5: stickers[i][j].setBackground(Color.YELLOW);
				}
			}
		}
		
		
		
	} 
}
